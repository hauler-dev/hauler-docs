"use strict";(self.webpackChunkhauler=self.webpackChunkhauler||[]).push([[499],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||l;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3757:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={},o=void 0,i={unversionedId:"usage/usage",id:"usage/usage",title:"usage",description:"Quickstart",source:"@site/docs/usage/usage.md",sourceDirName:"usage",slug:"/usage/",permalink:"/docs/usage/",draft:!1,editUrl:"https://github.com/rancherfederal/hauler-docs/edit/main/docs/usage/usage.md",tags:[],version:"current",frontMatter:{},sidebar:"carbideSidebar",previous:{title:"installation",permalink:"/docs/installation/"}},s={},c=[{value:"Quickstart",id:"quickstart",level:2},{value:"Guided Examples",id:"guided-examples",level:2},{value:"Built in content",id:"built-in-content",level:3},{value:"Content API",id:"content-api",level:3},{value:"Collections",id:"collections",level:3},{value:"User defined <code>collections</code>",id:"user-defined-collections",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"The tl;dr for how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler")," to fetch, transport, and distribute ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# fetch some content\nhauler store add file "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"\nhauler store add chart longhorn --repo "https://charts.longhorn.io"\nhauler store add image "rancher/cowsay"\n\n# transport the content\nhauler store save\n\n# <-airgap the haul.tar.zst file generated->\n\n# load the content\nhauler store load\n\n# serve the content\nhauler store serve\n')),(0,r.kt)("p",null,"While the example above fits into a quickstart, it falls short of demonstrating all the capabilities ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler")," has to offer, including taking advantage of its fully declarative nature.  Keep reading the Guided Examples below for a more thorough walkthrough of ",(0,r.kt)("inlineCode",{parentName:"p"},"haulers")," full capabilities."),(0,r.kt)("h2",{id:"guided-examples"},"Guided Examples"),(0,r.kt)("p",null,"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler"),"'s primary objective is to simplify the content collection/distribution airgap process, a lot of the design revolves around the typical airgap workflow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"fetch -> save - | <airgap> | -> validate/load -> distribute\n")),(0,r.kt)("p",null,"This is accomplished as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# fetch content\nhauler store add ...\n\n# compress and archive content\nhauler store save\n\n# <airgap>\n\n# validate/load content\nhauler store load ...\n\n# distribute content\nhauler store serve\n")),(0,r.kt)("p",null,"At this point you're probably wondering: what is ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),"? In ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler")," land, there are a few important terms given to important resources:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"artifact"),": anything that can be represented as an ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/opencontainers/artifacts"},(0,r.kt)("inlineCode",{parentName:"a"},"oci artifact"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"content"),': built in "primitive" types of ',(0,r.kt)("inlineCode",{parentName:"li"},"artifacts")," that ",(0,r.kt)("inlineCode",{parentName:"li"},"hauler")," understands")),(0,r.kt)("h3",{id:"built-in-content"},"Built in content"),(0,r.kt)("p",null,"As of today, ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler")," understands three types of ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),", one with a strong legacy of community support and consensus, one with a finalized spec and experimental support, and one generic type created just for ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler"),".  These ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," types are outlined below:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"files")),":"),(0,r.kt)("p",null,"Generic content that can be represented as a file, either sourced locally or remotely."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# local file\nhauler store add file path/to/local/file.txt\n\n# remote file\nhauler store add file https://get.k3s.io\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"images")),":"),(0,r.kt)("p",null,"Any OCI compatible image can be fetched remotely."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# "shorthand"  image references\nhauler store add image rancher/k3s:v1.22.2-k3s1\n\n# fully qualified image references\nhauler store add image ghcr.io/fluxcd/flux-cli@sha256:02aa820c3a9c57d67208afcfc4bce9661658c17d15940aea369da259d2b976dd\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"charts")),":"),(0,r.kt)("p",null,"Helm charts represented as OCI content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# add a helm chart (defaults to latest version)\nhauler store add chart loki --repo "https://grafana.github.io/helm-charts"\n\n# add a specific version of a helm chart\nhauler store add chart loki --repo "https://grafana.github.io/helm-charts" --version 2.8.1\n\n# install directly from the oci content\nHELM_EXPERIMENTAL_OCI=1 helm install loki oci://localhost:3000/library/loki --version 2.8.1\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler")," supports the currently experimental format of helm as OCI content, but can also be represented as the usual tarball if necessary")),(0,r.kt)("h3",{id:"content-api"},"Content API"),(0,r.kt)("p",null,"While imperatively adding ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler")," is a simple way to get started, the recommended long term approach is to use the provided api that each ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," has, in conjunction with the ",(0,r.kt)("inlineCode",{parentName:"p"},"sync")," command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# create a haul from declaratively defined content\nhauler store sync -f testdata/contents.yaml\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For a commented view of the ",(0,r.kt)("inlineCode",{parentName:"p"},"contents")," api, take a look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"testdata")," folder in the root of the project.")),(0,r.kt)("p",null,"The API for each type of built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," allows you to easily and declaratively define all the ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," that exist within a ",(0,r.kt)("inlineCode",{parentName:"p"},"haul"),", and ensures a more gitops compatible workflow for managing the lifecycle of your ",(0,r.kt)("inlineCode",{parentName:"p"},"hauls"),"."),(0,r.kt)("p",null,"It's also easy to imperatively generate a declarative contents.yaml"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This will generate a list of all images running in your cluster, store it in an environment variable, then echo the environment variable to show the list.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export IMAGE_LIST=$(kubectl get pods --all-namespaces -o jsonpath=\"{.items[*].spec.containers[*].image}\" |tr -s '[[:space:]]' '\\n' |sort |uniq -c | cut -c 9-)\necho \"$IMAGE_LIST\"\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"index.docker.io/rancher/hardened-etcd:v3.5.1-k3s1-build20220112\nindex.docker.io/rancher/hardened-kubernetes:v1.23.5-rke2r1-build20220316\nindex.docker.io/rancher/rke2-cloud-provider:v0.0.3-build20211118\nrancher/hardened-calico:v3.21.4-build20220228\nrancher/hardened-cluster-autoscaler:v1.8.5-build20211119\nrancher/hardened-coredns:v1.9.1-build20220318\nrancher/hardened-flannel:v0.17.0-build20220317\nrancher/hardened-k8s-metrics-server:v0.5.0-build20211119\nrancher/klipper-helm:v0.7.0-build20220315\nrancher/nginx-ingress-controller:nginx-1.0.2-hardened4\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The generated list of images can then be used to easily generate a hauler config file by using the following logic:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"temp=$(cat \"$IMAGE_LIST\" | sed 's/^/  - name: /')\n# sed, stream editor, appends 2 spaces of indentation denotes \n# an entry in a list, then adds name: to match expected syntax\ncat << EOF | tee contents.yaml\napiVersion: content.hauler.cattle.io/v1alpha1\nkind: Images\nmetadata:\n  name: myimage\nspec:\n  images:\n$temp\nEOF\n\ncat contents.yaml\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The result would look like this")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"apiVersion: content.hauler.cattle.io/v1alpha1\nkind: Images\nmetadata:\n  name: myimage\nspec:\n  images:\n  - name: index.docker.io/rancher/hardened-etcd:v3.5.1-k3s1-build20220112\n  - name: index.docker.io/rancher/hardened-kubernetes:v1.23.5-rke2r1-build20220316\n  - name: index.docker.io/rancher/rke2-cloud-provider:v0.0.3-build20211118\n  - name: rancher/hardened-calico:v3.21.4-build20220228\n  - name: rancher/hardened-cluster-autoscaler:v1.8.5-build20211119\n  - name: rancher/hardened-coredns:v1.9.1-build20220318\n  - name: rancher/hardened-flannel:v0.17.0-build20220317\n  - name: rancher/hardened-k8s-metrics-server:v0.5.0-build20211119\n  - name: rancher/klipper-helm:v0.7.0-build20220315\n  - name: rancher/nginx-ingress-controller:nginx-1.0.2-hardened4\n")),(0,r.kt)("h3",{id:"collections"},"Collections"),(0,r.kt)("p",null,"Earlier we referred to ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),' as "primitives".  While the quotes justify the loose definition of that term, we call it that because they can be used to build groups of ',(0,r.kt)("inlineCode",{parentName:"p"},"content"),", which we call ",(0,r.kt)("inlineCode",{parentName:"p"},"collections"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"collections")," are groups of 1 or more ",(0,r.kt)("inlineCode",{parentName:"p"},"contents")," that collectively represent something desirable.  Just like ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),", there are a handful that are built in to ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler"),"."),(0,r.kt)("p",null,"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"collections")," usually contain more purposefully crafted ",(0,r.kt)("inlineCode",{parentName:"p"},"contents"),", we restrict their use to the declarative commands (",(0,r.kt)("inlineCode",{parentName:"p"},"sync"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# sync a collection\nhauler store sync -f my-collection.yaml\n\n# sync sets of content/collection\nhauler store sync -f collection.yaml -f content.yaml\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"thickcharts")),":"),(0,r.kt)("p",null,"Thick Charts represent the combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"charts")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"images"),".  When storing a thick chart, the chart ",(0,r.kt)("em",{parentName:"p"},"and")," the charts dependent images will be fetched and stored by ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler"),".  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# thick-chart.yaml\napiVersion: collection.hauler.cattle.io/v1alpha1\nkind: ThickCharts\nmetadata:\n  name: loki\nspec:\n  charts:\n    - name: loki\n      repoURL: https://grafana.github.io/helm-charts\n")),(0,r.kt)("p",null,"When syncing the collection above, ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler")," will identify the images the chart depends on and store those too"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The method for identifying images is constantly changing, as of today, the chart is rendered and a configurable set of container defining json path's are processed.  The most common paths are recognized by hauler, but this can be configured for the more niche CRDs out there.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"k3s")),":"),(0,r.kt)("p",null,"Combining ",(0,r.kt)("inlineCode",{parentName:"p"},"files")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"images"),", full clusters can also be captured by ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler")," for further simplifying the already simple nature of ",(0,r.kt)("inlineCode",{parentName:"p"},"k3s"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# k3s.yaml\n---\napiVersion: collection.hauler.cattle.io/v1alpha1\nkind: K3s\nmetadata:\n  name: k3s\nspec:\n  version: stable\n")),(0,r.kt)("p",null,"Using the collection above, the dependent files (",(0,r.kt)("inlineCode",{parentName:"p"},"k3s")," executable and ",(0,r.kt)("inlineCode",{parentName:"p"},"https://get.k3s.io")," script) will be fetched, as well as all the dependent images."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We know not everyone uses the get.k3s.io script to provision k3s, in the future this may change, but until then you're welcome to mix and match the ",(0,r.kt)("inlineCode",{parentName:"p"},"collection")," with any of your own additional ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," ")),(0,r.kt)("h4",{id:"user-defined-collections"},"User defined ",(0,r.kt)("inlineCode",{parentName:"h4"},"collections")),(0,r.kt)("p",null,"Although ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"collections")," can only be used when they are baked in to ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler"),", the goal is to allow these to be securely user-defined, allowing you to define your own desirable ",(0,r.kt)("inlineCode",{parentName:"p"},"collection")," types, and leave the heavy lifting to ",(0,r.kt)("inlineCode",{parentName:"p"},"hauler"),".  Check out our roadmap and for more info on that."))}u.isMDXComponent=!0}}]);